/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.flesoft.cepre.ui.examen;

import com.digitalpersona.uareu.ReaderCollection;
import com.digitalpersona.uareu.UareUException;
import com.digitalpersona.uareu.UareUGlobal;
import com.flesoft.cepre.dao.ExamenDao;
import com.flesoft.cepre.model.Examen;
import com.flesoft.cepre.ui.Main;
import com.flesoft.cepre.ui.asistencia.IFAsistenciaExamen;
import com.flesoft.cepre.ui.asistencia.IFIRegistro;
import com.flesoft.cepre.ui.asistencia.IFIdentification;
//import com.flesoft.cepre.ui.asistencia.IFAsistenciaExamenParallel;
import com.flesoft.cepre.ui.examen.importar.IFImportarAulas;
import com.flesoft.cepre.ui.util.DateUtils;
import com.flesoft.cepre.ui.util.MessageBox;
import com.flesoft.cepre.util.AppContext;
import java.awt.EventQueue;
import java.beans.PropertyVetoException;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 *
 * @author user
 */
public class IFExamen extends javax.swing.JInternalFrame {

    private static final Log LOGGER = LogFactory.getLog(IFExamen.class);

    /**
     * Creates new form IFEstudiantes
     */
    public IFExamen() {
        initComponents();

        anadirIFExamen();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane2 = new javax.swing.JSplitPane();
        jXTaskPaneContainer2 = new org.jdesktop.swingx.JXTaskPaneContainer();
        pnbActualizarParametros3 = new org.jdesktop.swingx.JXTaskPane();
        jLabel7 = new javax.swing.JLabel();
        jSeparator6 = new javax.swing.JSeparator();
        jLabel10 = new javax.swing.JLabel();
        jSeparator7 = new javax.swing.JSeparator();
        jLabel11 = new javax.swing.JLabel();
        pnbActualizarParametros4 = new org.jdesktop.swingx.JXTaskPane();
        jLabel8 = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JSeparator();
        jLabel12 = new javax.swing.JLabel();
        jSeparator8 = new javax.swing.JSeparator();
        jLabel9 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        contenedor = new javax.swing.JDesktopPane();

        setTitle("MODULO EXAMENES");
        setFrameIcon(null);
        setVisible(true);

        jXTaskPaneContainer2.setBackground(new java.awt.Color(240, 238, 238));
        jXTaskPaneContainer2.setBorder(null);
        jXTaskPaneContainer2.setBackgroundPainter(null);
        org.jdesktop.swingx.VerticalLayout verticalLayout1 = new org.jdesktop.swingx.VerticalLayout();
        verticalLayout1.setGap(14);
        jXTaskPaneContainer2.setLayout(verticalLayout1);

        pnbActualizarParametros3.setBackground(new java.awt.Color(240, 238, 238));
        pnbActualizarParametros3.setForeground(new java.awt.Color(51, 51, 51));
        pnbActualizarParametros3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        pnbActualizarParametros3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/24/attendance_list.png"))); // NOI18N
        pnbActualizarParametros3.setTitle("EXAMENES");
        pnbActualizarParametros3.setLayout(new org.jdesktop.swingx.VerticalLayout());

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel7.setForeground(java.awt.SystemColor.controlDkShadow);
        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/16/page.png"))); // NOI18N
        jLabel7.setText("Examenes programados");
        jLabel7.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 0, 5, 0));
        jLabel7.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }
        });
        pnbActualizarParametros3.add(jLabel7);

        jSeparator6.setForeground(new java.awt.Color(34, 34, 34));
        pnbActualizarParametros3.add(jSeparator6);

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel10.setForeground(java.awt.SystemColor.controlDkShadow);
        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/16/icons8-upload-16.png"))); // NOI18N
        jLabel10.setText("Cargar distribucion de aulas");
        jLabel10.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 0, 5, 0));
        jLabel10.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel10MouseClicked(evt);
            }
        });
        pnbActualizarParametros3.add(jLabel10);

        jSeparator7.setForeground(new java.awt.Color(34, 34, 34));
        pnbActualizarParametros3.add(jSeparator7);

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel11.setForeground(java.awt.SystemColor.controlDkShadow);
        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/16/icons8-report-filled-16.png"))); // NOI18N
        jLabel11.setText("Reporte distribucion de aulas");
        jLabel11.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 0, 5, 0));
        jLabel11.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel11MouseClicked(evt);
            }
        });
        pnbActualizarParametros3.add(jLabel11);

        jXTaskPaneContainer2.add(pnbActualizarParametros3);

        pnbActualizarParametros4.setBackground(new java.awt.Color(240, 238, 238));
        pnbActualizarParametros4.setForeground(new java.awt.Color(51, 51, 51));
        pnbActualizarParametros4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        pnbActualizarParametros4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/24/paste.png"))); // NOI18N
        pnbActualizarParametros4.setTitle("ASISTENCIA EXAMEN      ");
        pnbActualizarParametros4.setLayout(new org.jdesktop.swingx.VerticalLayout());

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel8.setForeground(java.awt.SystemColor.controlDkShadow);
        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/16/fingerprint-20.png"))); // NOI18N
        jLabel8.setText("Registrar asistencia");
        jLabel8.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 0, 5, 0));
        jLabel8.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel8MouseClicked(evt);
            }
        });
        pnbActualizarParametros4.add(jLabel8);

        jSeparator5.setForeground(new java.awt.Color(34, 34, 34));
        pnbActualizarParametros4.add(jSeparator5);

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel12.setForeground(java.awt.SystemColor.controlDkShadow);
        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/16/fingerprint-20.png"))); // NOI18N
        jLabel12.setText("Registrar asistencia 2");
        jLabel12.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 0, 5, 0));
        jLabel12.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel12MouseClicked(evt);
            }
        });
        pnbActualizarParametros4.add(jLabel12);

        jSeparator8.setForeground(new java.awt.Color(34, 34, 34));
        pnbActualizarParametros4.add(jSeparator8);

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel9.setForeground(java.awt.SystemColor.controlDkShadow);
        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/16/icons8-report-filled-16.png"))); // NOI18N
        jLabel9.setText("Reporte de asistencia");
        jLabel9.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 0, 5, 0));
        jLabel9.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel9MouseClicked(evt);
            }
        });
        pnbActualizarParametros4.add(jLabel9);

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel13.setForeground(java.awt.SystemColor.controlDkShadow);
        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/16/icons8-report-filled-16.png"))); // NOI18N
        jLabel13.setText("Registro auxiliar");
        jLabel13.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 0, 5, 0));
        jLabel13.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel13MouseClicked(evt);
            }
        });
        pnbActualizarParametros4.add(jLabel13);

        jXTaskPaneContainer2.add(pnbActualizarParametros4);

        jSplitPane2.setLeftComponent(jXTaskPaneContainer2);

        javax.swing.GroupLayout contenedorLayout = new javax.swing.GroupLayout(contenedor);
        contenedor.setLayout(contenedorLayout);
        contenedorLayout.setHorizontalGroup(
            contenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 692, Short.MAX_VALUE)
        );
        contenedorLayout.setVerticalGroup(
            contenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 533, Short.MAX_VALUE)
        );

        jSplitPane2.setRightComponent(contenedor);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 535, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseClicked
        anadirIFExamen();
    }//GEN-LAST:event_jLabel7MouseClicked

    private void jLabel10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel10MouseClicked
        limpiarFrames();
        IFImportarAulas iFasistencia = new IFImportarAulas();
        //iFasistencia.setParentFrame(this);
        this.contenedor.add(iFasistencia);
        try {
            iFasistencia.setMaximum(true);
        } catch (PropertyVetoException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        iFasistencia.show();
    }//GEN-LAST:event_jLabel10MouseClicked

    private void jLabel8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseClicked
        System.out.println("hoyExamen()?:::::: " + hoyExamen());
        if (!checkReader()) {
            return;
        }
        limpiarFrames();
        ExamenDao examenDao = AppContext.getInstance().getBean(ExamenDao.class);
        Date hoy = new Date();
        Examen examen_ = examenDao.buscarPorFecha(hoy);
        if (examen_ == null) {
            //TaskDialogs.warning(null, "Importante!", "Ningun examen programado para hoy");
            List<Examen> examenes = examenDao.listarPendientes();
            Object[] choices = examenes.toArray();
            Examen input = (Examen) JOptionPane.showInputDialog(null,
                    "NO SE ENCONTRO NINGUN EXAMEN PROGRAMADO PARA HOY: " + DateUtils.localDate(hoy)
                    + " \nPor favor seleccione un examen",
                    "NO SE ENCONTRO NINGUN EXAMEN", JOptionPane.INFORMATION_MESSAGE, null,
                    choices, // Array
                    null); // Valor Inicial
            System.out.println(input);
            if (input == null) {
                return;
            }
            examen_ = input;
        }

        IFAsistenciaExamen iFasistencia = new IFAsistenciaExamen(examen_);
        //iFasistencia.cargarDatosExamen();
//        iFasistencia.setParentFrame(this);
        this.contenedor.add(iFasistencia);
        try {
            iFasistencia.setMaximum(true);
        } catch (PropertyVetoException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        iFasistencia.show();
    }//GEN-LAST:event_jLabel8MouseClicked

    private void jLabel11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel11MouseClicked
        limpiarFrames();
        IFDistribucion ifAexamen = new IFDistribucion();
        //iFasistencia.setParentFrame(this);
        this.contenedor.add(ifAexamen);
        try {
            ifAexamen.setMaximum(true);
        } catch (PropertyVetoException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        ifAexamen.show();
    }//GEN-LAST:event_jLabel11MouseClicked

    private void jLabel9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel9MouseClicked
        limpiarFrames();
        IFAExamen ifAexamen = new IFAExamen();
        //iFasistencia.setParentFrame(this);
        this.contenedor.add(ifAexamen);
        try {
            ifAexamen.setMaximum(true);
        } catch (PropertyVetoException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        ifAexamen.show();
    }//GEN-LAST:event_jLabel9MouseClicked

    private void jLabel12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel12MouseClicked
        System.out.println("hoyExamen()?:::::: " + hoyExamen());
        if (!checkReader()) {
            return;
        }
        limpiarFrames();
        ExamenDao examenDao = AppContext.getInstance().getBean(ExamenDao.class);
        Date hoy = new Date();
        Examen examen_ = examenDao.buscarPorFecha(hoy);
        if (examen_ == null) {
            //TaskDialogs.warning(null, "Importante!", "Ningun examen programado para hoy");
            List<Examen> examenes = examenDao.listarPendientes();
            Object[] choices = examenes.toArray();
            Examen input = (Examen) JOptionPane.showInputDialog(null,
                    "NO SE ENCONTRO NINGUN EXAMEN PROGRAMADO PARA HOY: " + DateUtils.localDate(hoy)
                    + " \nPor favor seleccione un examen",
                    "NO SE ENCONTRO NINGUN EXAMEN", JOptionPane.INFORMATION_MESSAGE, null,
                    choices, // Array
                    null); // Valor Inicial
            System.out.println(input);
            if (input == null) {
                return;
            }
            examen_ = input;
        }
        IFIdentification ifiEsrudiantes = new IFIdentification(examen_);
        this.contenedor.add(ifiEsrudiantes);
        try {
            ifiEsrudiantes.setMaximum(true);
        } catch (PropertyVetoException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        ifiEsrudiantes.show();
//        System.out.println("hoyExamen()?:::::: " + hoyExamen());
//        if (!checkReader()) {
//            return;
//        }
//        limpiarFrames();
//        ExamenDao examenDao = AppContext.getInstance().getBean(ExamenDao.class);
//        Date hoy = new Date();
//        Examen examen_ = examenDao.buscarPorFecha(hoy);
//        if (examen_ == null) {
//            //TaskDialogs.warning(null, "Importante!", "Ningun examen programado para hoy");
//            List<Examen> examenes = examenDao.listarPendientes();
//            Object[] choices = examenes.toArray();
//            Examen input = (Examen) JOptionPane.showInputDialog(null,
//                    "NO SE ENCONTRO NINGUN EXAMEN PROGRAMADO PARA HOY: " + DateUtils.localDate(hoy)
//                    + " \nPor favor seleccione un examen",
//                    "NO SE ENCONTRO NINGUN EXAMEN", JOptionPane.INFORMATION_MESSAGE, null,
//                    choices, // Array
//                    null); // Valor Inicial
//            System.out.println(input);
//            if (input == null) {
//                return;
//            }
//            examen_ = input;
//        }
//
//        IFAsistenciaExamenParallel iFasistencia = new IFAsistenciaExamenParallel(examen_);
//        //iFasistencia.cargarDatosExamen();
////        iFasistencia.setParentFrame(this);
//        this.contenedor.add(iFasistencia);
//        try {
//            iFasistencia.setMaximum(true);
//        } catch (PropertyVetoException ex) {
//            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        iFasistencia.show();
    }//GEN-LAST:event_jLabel12MouseClicked

    private void jLabel13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel13MouseClicked
        System.out.println("hoyExamen()?:::::: " + hoyExamen());
        if (!checkReader()) {
            return;
        }
        limpiarFrames();
        ExamenDao examenDao = AppContext.getInstance().getBean(ExamenDao.class);
        Date hoy = new Date();
        Examen examen_ = examenDao.buscarPorFecha(hoy);
        if (examen_ == null) {
            //TaskDialogs.warning(null, "Importante!", "Ningun examen programado para hoy");
            List<Examen> examenes = examenDao.listarPendientes();
            Object[] choices = examenes.toArray();
            Examen input = (Examen) JOptionPane.showInputDialog(null,
                    "NO SE ENCONTRO NINGUN EXAMEN PROGRAMADO PARA HOY: " + DateUtils.localDate(hoy)
                    + " \nPor favor seleccione un examen",
                    "NO SE ENCONTRO NINGUN EXAMEN", JOptionPane.INFORMATION_MESSAGE, null,
                    choices, // Array
                    null); // Valor Inicial
            System.out.println(input);
            if (input == null) {
                return;
            }
            examen_ = input;
        }
        IFIRegistro ifiEsrudiantes = new IFIRegistro();
        this.contenedor.add(ifiEsrudiantes);
        try {
            ifiEsrudiantes.setMaximum(true);
        } catch (PropertyVetoException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        ifiEsrudiantes.show();
    }//GEN-LAST:event_jLabel13MouseClicked

    private void anadirIFExamen() {
        limpiarFrames();
        IFIExamen ifiEsrudiantes = new IFIExamen();
        this.contenedor.add(ifiEsrudiantes);
        try {
            ifiEsrudiantes.setMaximum(true);
        } catch (PropertyVetoException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        ifiEsrudiantes.show();
    }

    private void limpiarFrames() {
        JInternalFrame[] frames = contenedor.getAllFrames();
        for (JInternalFrame f : frames) {
            f.dispose();
        }
        contenedor.removeAll();
        contenedor.updateUI();
        revalidate();
        repaint();
    }

    protected boolean checkReader() {
        try {
            ReaderCollection m_collection = UareUGlobal.GetReaderCollection();
            m_collection.GetReaders();
            if (m_collection.isEmpty()) {
                MessageBox.Warning("No se detecto ningun Lector, por favor conecte el lector de huellas antes...");
                return false;
            }
        } catch (UareUException e1) {
            // TODO Auto-generated catch block
            JOptionPane.showMessageDialog(null, "Error getting collection");
            return false;
        }

        return true;
//        m_reader = m_collection.get(0);
//
//        if (null == m_reader) {
//            MessageBox.Warning("Lector no conectado?");
//        }
    }

    private boolean hoyExamen() {
        //String ciclo_id = Config.CICLO;
        Date hoy = new Date();
        ExamenDao examenDao = AppContext.getInstance().getBean(ExamenDao.class);
        try {
            Examen examen = examenDao.buscarPorFecha(hoy);
            LOGGER.info("EXAMEN: " + examen.getNombre());
            return examen != null;
        } catch (NullPointerException e) {
            LOGGER.info("Ningun examen para hoy " + e.toString());
            return false;
            //JOptionPane.showMessageDialog(this, "Ningun Examen programado para hoy", "AVISO!", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ne) {
            LOGGER.info("Ningun examen para hoy " + ne.toString());
            return false;
            //JOptionPane.showMessageDialog(this, "Ningun Examen programado para hoy", "AVISO!", JOptionPane.ERROR_MESSAGE);
        }
        //return examen != null;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane contenedor;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSplitPane jSplitPane2;
    private org.jdesktop.swingx.JXTaskPaneContainer jXTaskPaneContainer2;
    private org.jdesktop.swingx.JXTaskPane pnbActualizarParametros3;
    private org.jdesktop.swingx.JXTaskPane pnbActualizarParametros4;
    // End of variables declaration//GEN-END:variables
}
